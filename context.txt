Model-View-Controller (MVC): This pattern separates the application's data model, user interface, and control flow into distinct components, making it easier to maintain and extend.

Singleton: This pattern ensures that a class has only one instance and provides a global point of access to that instance.

Factory: This pattern provides a way to create objects without specifying the exact class of object that will be created.

Observer: This pattern allows objects to be notified of changes to other objects, without those objects being tightly coupled.

Decorator: This pattern allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class.

Command: This pattern encapsulates a request as an object, which can then be passed to different objects or be queued for later execution.

Adapter: This pattern allows incompatible interfaces to work together by providing a wrapper that adapts one interface to match the other.

Facade: This pattern provides a simplified interface to a complex system, making it easier to use.

Template Method: This pattern defines the skeleton of an algorithm in a method, allowing subclasses to fill in the details.

Iterator: This pattern allows iteration over a collection of objects without exposing the underlying representation of the collection.